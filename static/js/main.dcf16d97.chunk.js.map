{"version":3,"sources":["Store.js","components/Todo.js","components/AddTodo.js","components/EditTodo.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","firestore","settings","timestampsInSnapshots","store","compose","reactReduxFirebase","userProfile","useFirestoreForProfile","reduxFirestore","createStore","createStoreWithFirebase","combineReducers","firebaseReducer","firestoreReducer","window","__REDUX_DEVTOOLS_EXTENSION__","Todo","state","edit","id","newInput","updateTodo","e","preventDefault","NewTodo","_this","props","setState","this","delete","collection","doc","_this2","books","map","book","react_default","a","createElement","className","onSubmit","bind","onChange","target","value","defaultValue","title","console","log","class","Link","to","concat","onClick","deleteTodo","href","Component","firestoreConnect","connect","ordered","todo","AddTodo","handleSubmit","data","add","type","placeholder","EditTodo","newTodo","match","params","update","then","history","push","MainComp","Fragment","components_AddTodo","components_Todo","App","es","Store","BrowserRouter","Route","exact","path","component","Edit","Boolean","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dcf16d97.chunk.js","sourcesContent":["import { createStore, combineReducers, compose } from \"redux\";\nimport firebase from \"firebase\";\nimport \"firebase/firestore\";\nimport { reactReduxFirebase, firebaseReducer } from \"react-redux-firebase\";\nimport { reduxFirestore, firestoreReducer } from \"redux-firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDamVJxF6Shy9R6dAKsHinP-gNiEPy6VPE\",\n  authDomain: \"todo-d08e8.firebaseapp.com\",\n  databaseURL: \"https://todo-d08e8.firebaseio.com\",\n  projectId: \"todo-d08e8\",\n  storageBucket: \"todo-d08e8.appspot.com\",\n  messagingSenderId: \"1090009045948\"\n};\n\n// react-redux-firebase config\nconst rrfConfig = {\n  userProfile: \"users\",\n  useFirestoreForProfile: true // Firestore for Profile instead of Realtime DB\n};\n\n// Init firebase instance\nfirebase.initializeApp(firebaseConfig);\n// Init firestore\nconst firestore = firebase.firestore();\nconst settings = { timestampsInSnapshots: true };\nfirestore.settings(settings);\n\n// Add reactReduxFirebase enhancer when making store creator\nconst createStoreWithFirebase = compose(\n  reactReduxFirebase(firebase, rrfConfig), // firebase instance as first argument\n  reduxFirestore(firebase)\n)(createStore);\n\nconst rootReducer = combineReducers({\n  firebase: firebaseReducer,\n  firestore: firestoreReducer\n});\n\n// Create initial state\nconst initialState = {};\n\n// Create store\nconst store = createStoreWithFirebase(\n  rootReducer,\n  initialState,\n  compose(\n    reactReduxFirebase(firebase),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\n\nexport default store;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { firestoreConnect } from \"react-redux-firebase\";\nimport { compose } from \"redux\";\nimport { Link } from \"react-router-dom\";\n\nclass Todo extends Component {\n  state = {\n    edit: false,\n    id: \"\",\n    newInput: \"\"\n  };\n  updateTodo = (id, e) => {\n    e.preventDefault();\n    const NewTodo = this.state.newInput;\n    this.props.updateTodo(id, NewTodo);\n    this.setState({ edit: false });\n  };\n\n  deleteTodo(id) {\n    const { firestore } = this.props;\n\n    firestore.delete({ collection: \"todo\", doc: id });\n  }\n\n  render() {\n    const books = this.props.books;\n\n    var edit = \"\";\n    if (this.state.id !== \"\") {\n      books.map(book => {\n        if (book.id === this.state.id) {\n          edit = (\n            <li className=\"list-group-item\">\n              <form onSubmit={this.updateTodo.bind(this, book.id)}>\n                <input\n                  onChange={e => this.setState({ newInput: e.target.value })}\n                  className=\"form-control\"\n                  defaultValue={book.title}\n                />\n              </form>\n            </li>\n          );\n        }\n      });\n    }\n    if (books) {\n      console.log(books);\n      return (\n        <div className=\"container text-center text-light\">\n          <h1 className=\"\">Todo List (Made by M.Alvee)</h1>\n\n          <ul class=\"list-group text-dark my-2\">\n            {this.state.edit == false\n              ? books.map(book => (\n                  <li className=\"list-group-item\">\n                    {\" \"}\n                    {book.title}{\" \"}\n                    <Link\n                      to={`/edit/${book.id}/${book.title}`}\n                      className=\"float-right ml-3\"\n                    >\n                      <i class=\"fas fa-marker\" />\n                    </Link>\n                    <a\n                      onClick={this.deleteTodo.bind(this, book.id)}\n                      href=\"#!\"\n                      className=\"float-right\"\n                    >\n                      <i class=\"far fa-trash-alt\" />\n                    </a>{\" \"}\n                  </li>\n                ))\n              : edit}\n          </ul>\n        </div>\n      );\n    } else {\n      return <h1>Loading</h1>;\n    }\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    books: state.books.books\n  };\n};\n\nexport default compose(\n  firestoreConnect([{ collection: \"todo\" }]),\n  connect(state => ({\n    books: state.firestore.ordered.todo\n  }))\n)(Todo);\n","import React, { Component } from \"react\";\nimport { firestoreConnect } from \"react-redux-firebase\";\n\nclass AddTodo extends Component {\n  state = {\n    todo: \"\"\n  };\n  handleSubmit = e => {\n    e.preventDefault();\n    const data = {\n      title: this.state.todo\n    };\n    const { firestore } = this.props;\n\n    firestore.add({ collection: \"todo\" }, data);\n    this.setState({ todo: \"\" });\n  };\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          onChange={e => this.setState({ todo: e.target.value })}\n          type=\"text\"\n          className=\"form-control form-control-lg\"\n          placeholder=\"Enter todo and press Enter\"\n        />\n      </form>\n    );\n  }\n}\n\nexport default firestoreConnect()(AddTodo);\n","import React, { Component } from \"react\";\nimport { firestoreConnect } from \"react-redux-firebase\";\n\nclass EditTodo extends Component {\n  state = {\n    newTodo: \"\"\n  };\n  updateTodo = e => {\n    e.preventDefault();\n    const { firestore } = this.props;\n    const id = this.props.match.params.id;\n    firestore\n      .update({ collection: \"todo\", doc: id }, { title: this.state.newTodo })\n      .then(() => {\n        this.props.history.push(\"/\");\n      });\n  };\n  render() {\n    return (\n      <div className=\"text-center text-light\">\n        <h1>Edit Todo</h1>\n        <form onSubmit={this.updateTodo}>\n          <input\n            onChange={e => this.setState({ newTodo: e.target.value })}\n            type=\"text\"\n            defaultValue={this.props.match.params.data}\n            className=\"form-control\"\n          />\n          <br />\n          <br />\n          <input type=\"submit\" value=\"Update\" className=\"btn btn-info\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default firestoreConnect()(EditTodo);\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Provider } from \"react-redux\";\nimport Store from \"./Store\";\nimport Todo from \"./components/Todo\";\nimport AddTodo from \"./components/AddTodo\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Edit from \"./components/EditTodo\";\n\nclass MainComp extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <AddTodo />\n        <Todo />\n      </React.Fragment>\n    );\n  }\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={Store}>\n        <Router>\n          <div className=\"container\">\n            <Route exact path=\"/\" component={MainComp} />\n            <Route exact path=\"/edit/:id/:data\" component={Edit} />\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}